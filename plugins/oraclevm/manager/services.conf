apply Service "running_vm" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.name
  check_command = "ovm_vm_single"
  assign where host.vars.ovm_hypervisors
}

apply Service "procs" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_procs"
  vars.ovm_parameters = "'-w 350 -c 450'"
  assign where host.vars.os == "OracleVM"
}

apply Service "ntpd" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_procs"
  vars.ovm_parameters = "'-C ntpd -w 1:1 -c 1:1'"
  assign where host.vars.os == "OracleVM"
}

apply Service "ovmwatch" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_procs"
  vars.ovm_parameters = "'-C ovmwatch -w 1:1 -c 1:1'"
  assign where host.vars.os == "OracleVM"
}

apply Service "ovm-consoled" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_procs"
  vars.ovm_parameters = "'-C python -a ovm-consoled -w 1:1 -c 1:1'"
  assign where host.vars.os == "OracleVM"
}

apply Service "ovs-agent" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_procs"
  vars.ovm_parameters = "'-C python -a agtctl -w 7:8 -c 7:8'"
  assign where host.vars.os == "OracleVM"
}

apply Service "devmon" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_procs"
  vars.ovm_parameters = "'-C devmon -w 1:1 -c 1:1'"
  assign where host.vars.os == "OracleVM"
}

apply Service "xend" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_procs"
  vars.ovm_parameters = "'-C xend -w 2:2 -c 2:2'"
  assign where host.vars.os == "OracleVM"
}

apply Service "running_vm" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_ovm_runningvm.sh"
  vars.ovm_parameters = "'-w 20 -c 30'"
  assign where host.vars.os == "OracleVM"
}

apply Service "disk" {
  import "generic-service"
  import "grafana-disable"
  enable_notifications = 0
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_disk_status.sh"
  vars.ovm_parameters = "'-w 20% -c 10%'"
  assign where host.vars.os == "OracleVM"
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars += config
  vars.ovm_checkname = "check_disk"
  vars.ovm_parameters = "'-w 20% -c 10% -p " + vars.disk_partitions + "'"
  import "grafana-custom"
  assign where host.vars.os == "OracleVM"
}

apply Service "load" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_load"
  vars.ovm_parameters = "'-w 5.0,4.0,3.0 -c 10.0,6.0,4.0'"
  assign where host.vars.os == "OracleVM"
}

apply Service "memory" {
  import "generic-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_mem.pl"
  vars.ovm_parameters = "'-f -C -w 20 -c 10'"
  import "grafana-service"
  assign where host.vars.os == "OracleVM"
}

apply Service "swap" {
  import "generic-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_swap"
  vars.ovm_parameters = "'-w 50 -c 25'"
  import "grafana-service"
  assign where host.vars.os == "OracleVM"
}

apply Service "bonding" {
  import "generic-service"
  import "grafana-disable"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_linux_bonding"
  vars.ovm_parameters = "'-s'"
  assign where host.vars.os == "OracleVM"
}

apply Service for (interface => config in host.vars.if_name) {
  enable_notifications = 0
  import "generic-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_traffic.sh"
  vars += config
  if (!vars.if_warn) {
    vars.if_warn = 1048576
  }
  if (!vars.if_crit) {
    vars.if_crit = 2097152
  }
  vars.ovm_parameters = "'-i " + interface + " -w " + vars.if_warn + " -c " + vars.if_crit + "'"
  // vars.if_name = "eth0"
  if (match("*.*", interface)) { // VLAN support
    import "grafana-custom"
  } else {
    import "grafana-service"
  }
  display_name = "interface " + interface
  vars.if_name = interface
  assign where host.vars.os == "OracleVM"
}

apply Service "ntp_time" {
  import "generic-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_ntp_time"
  vars.ovm_parameters = "'-H " + host.vars.ntp_address + "'"
  import "grafana-service"
  assign where host.vars.os == "OracleVM"
}

apply Service "uptime" {
  import "generic-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_uptime_local.sh"
  vars.ovm_parameters = "'-c 86400'"
  import "grafana-service"
  assign where host.vars.os == "OracleVM"
}

apply Service "zombie" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_procs"
  vars.ovm_parameters = "'-s Z -w 5 -c 10'"
  assign where host.vars.os == "OracleVM"
}

apply Service "users" {
  import "generic-service"
  import "grafana-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_users"
  vars.ovm_parameters = "'-w 2 -c 3'"
  assign where host.vars.os == "OracleVM"
}

apply Service "ovm_mem" {
  import "generic-service"
  command_endpoint = host.vars.ovm_manager
  check_command = "ovm_byssh"
  vars.ovm_hostname = host.name
  vars.ovm_checkname = "check_ovm_mem.sh"
  vars.ovm_parameters = "'-w 85 -c 95'"
  import "grafana-service"
  assign where host.vars.os == "OracleVM"
}
